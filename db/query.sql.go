// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getOrdersForVisit = `-- name: GetOrdersForVisit :many
SELECT d.Name, o.Rating, o.ReviewText from
    Orders o join Dish d on o.DishId = d.id
    where o.VisitId = ?
`

type GetOrdersForVisitRow struct {
	Name       string
	Rating     sql.NullFloat64
	Reviewtext sql.NullString
}

func (q *Queries) GetOrdersForVisit(ctx context.Context, visitid sql.NullInt64) ([]GetOrdersForVisitRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersForVisit, visitid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrdersForVisitRow
	for rows.Next() {
		var i GetOrdersForVisitRow
		if err := rows.Scan(&i.Name, &i.Rating, &i.Reviewtext); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRestaurantHistory = `-- name: GetRestaurantHistory :many
SELECT id, Date, Time from Visit
    where UserId = ? and RestaurantId = ?
`

type GetRestaurantHistoryParams struct {
	Userid       sql.NullInt64
	Restaurantid sql.NullInt64
}

type GetRestaurantHistoryRow struct {
	ID   int64
	Date time.Time
	Time interface{}
}

func (q *Queries) GetRestaurantHistory(ctx context.Context, arg GetRestaurantHistoryParams) ([]GetRestaurantHistoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getRestaurantHistory, arg.Userid, arg.Restaurantid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRestaurantHistoryRow
	for rows.Next() {
		var i GetRestaurantHistoryRow
		if err := rows.Scan(&i.ID, &i.Date, &i.Time); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
